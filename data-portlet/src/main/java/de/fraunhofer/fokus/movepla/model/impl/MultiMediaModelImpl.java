package de.fraunhofer.fokus.movepla.model.impl;

/*
 * #%L
 * govapps_data
 * $Id: MultiMediaModelImpl.java 566 2014-11-13 15:22:01Z sma $
 * %%
 * Copyright (C) 2013 - 2014 Fraunhofer FOKUS / CC Ã–FIT
 * %%
 * Copyright (c) 2,013, Fraunhofer FOKUS, Kompetenzzentrum Oeffentliche IT 
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above copyright notice, 
 *    this list of conditions and the following disclaimer.
 * 
 * 2) Redistributions in binary form must reproduce the above copyright notice, 
 *    this list of conditions and the following disclaimer in the documentation 
 *    and/or other materials provided with the distribution.
 * 
 * 3) All advertising materials mentioning features or use of this software must 
 *    display the following acknowledgement: 
 *    This product includes software developed by Fraunhofer FOKUS, Kompetenzzentrum Oeffentliche IT.
 * 
 * 4) Neither the name of the organization nor the names of its contributors may 
 *    be used to endorse or promote products derived from this software without 
 *    specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY COPYRIGHT HOLDER ''AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL 
 * Fraunhofer FOKUS, Kompetenzzentrum Oeffentliche IT 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.fraunhofer.fokus.movepla.model.MultiMedia;
import de.fraunhofer.fokus.movepla.model.MultiMediaModel;
import de.fraunhofer.fokus.movepla.model.MultiMediaSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MultiMedia service. Represents a row in the &quot;mvp_MultiMedia&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.fraunhofer.fokus.movepla.model.MultiMediaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MultiMediaImpl}.
 * </p>
 *
 * @author jpa
 * @see MultiMediaImpl
 * @see de.fraunhofer.fokus.movepla.model.MultiMedia
 * @see de.fraunhofer.fokus.movepla.model.MultiMediaModel
 * @generated
 */
@JSON(strict = true)
public class MultiMediaModelImpl extends BaseModelImpl<MultiMedia>
    implements MultiMediaModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a multi media model instance should use the {@link de.fraunhofer.fokus.movepla.model.MultiMedia} interface instead.
     */
    public static final String TABLE_NAME = "mvp_MultiMedia";
    public static final Object[][] TABLE_COLUMNS = {
            { "multiMediaId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "name", Types.VARCHAR },
            { "type_", Types.INTEGER },
            { "imageId", Types.BIGINT },
            { "applicationId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table mvp_MultiMedia (multiMediaId LONG not null primary key,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,type_ INTEGER,imageId LONG,applicationId LONG)";
    public static final String TABLE_SQL_DROP = "drop table mvp_MultiMedia";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.de.fraunhofer.fokus.movepla.model.MultiMedia"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.de.fraunhofer.fokus.movepla.model.MultiMedia"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.de.fraunhofer.fokus.movepla.model.MultiMedia"),
            true);
    public static long APPLICATIONID_COLUMN_BITMASK = 1L;
    public static long COMPANYID_COLUMN_BITMASK = 2L;
    public static long IMAGEID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.de.fraunhofer.fokus.movepla.model.MultiMedia"));
    private static ClassLoader _classLoader = MultiMedia.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            MultiMedia.class
        };
    private long _multiMediaId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _userId;
    private String _userUuid;
    private Date _createDate;
    private Date _modifiedDate;
    private String _name;
    private int _type;
    private long _imageId;
    private long _originalImageId;
    private boolean _setOriginalImageId;
    private long _applicationId;
    private long _originalApplicationId;
    private boolean _setOriginalApplicationId;
    private long _columnBitmask;
    private MultiMedia _escapedModelProxy;

    public MultiMediaModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static MultiMedia toModel(MultiMediaSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        MultiMedia model = new MultiMediaImpl();

        model.setMultiMediaId(soapModel.getMultiMediaId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setName(soapModel.getName());
        model.setType(soapModel.getType());
        model.setImageId(soapModel.getImageId());
        model.setApplicationId(soapModel.getApplicationId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<MultiMedia> toModels(MultiMediaSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<MultiMedia> models = new ArrayList<MultiMedia>(soapModels.length);

        for (MultiMediaSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _multiMediaId;
    }

    public void setPrimaryKey(long primaryKey) {
        setMultiMediaId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_multiMediaId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return MultiMedia.class;
    }

    public String getModelClassName() {
        return MultiMedia.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("multiMediaId", getMultiMediaId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("name", getName());
        attributes.put("type", getType());
        attributes.put("imageId", getImageId());
        attributes.put("applicationId", getApplicationId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long multiMediaId = (Long) attributes.get("multiMediaId");

        if (multiMediaId != null) {
            setMultiMediaId(multiMediaId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        Integer type = (Integer) attributes.get("type");

        if (type != null) {
            setType(type);
        }

        Long imageId = (Long) attributes.get("imageId");

        if (imageId != null) {
            setImageId(imageId);
        }

        Long applicationId = (Long) attributes.get("applicationId");

        if (applicationId != null) {
            setApplicationId(applicationId);
        }
    }

    @JSON
    public long getMultiMediaId() {
        return _multiMediaId;
    }

    public void setMultiMediaId(long multiMediaId) {
        _multiMediaId = multiMediaId;
    }

    @JSON
    public long getCompanyId() {
        return _companyId;
    }

    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @JSON
    public long getUserId() {
        return _userId;
    }

    public void setUserId(long userId) {
        _userId = userId;
    }

    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    public Date getCreateDate() {
        return _createDate;
    }

    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    public void setName(String name) {
        _name = name;
    }

    @JSON
    public int getType() {
        return _type;
    }

    public void setType(int type) {
        _type = type;
    }

    @JSON
    public long getImageId() {
        return _imageId;
    }

    public void setImageId(long imageId) {
        _columnBitmask |= IMAGEID_COLUMN_BITMASK;

        if (!_setOriginalImageId) {
            _setOriginalImageId = true;

            _originalImageId = _imageId;
        }

        _imageId = imageId;
    }

    public long getOriginalImageId() {
        return _originalImageId;
    }

    @JSON
    public long getApplicationId() {
        return _applicationId;
    }

    public void setApplicationId(long applicationId) {
        _columnBitmask |= APPLICATIONID_COLUMN_BITMASK;

        if (!_setOriginalApplicationId) {
            _setOriginalApplicationId = true;

            _originalApplicationId = _applicationId;
        }

        _applicationId = applicationId;
    }

    public long getOriginalApplicationId() {
        return _originalApplicationId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            MultiMedia.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public MultiMedia toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (MultiMedia) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        MultiMediaImpl multiMediaImpl = new MultiMediaImpl();

        multiMediaImpl.setMultiMediaId(getMultiMediaId());
        multiMediaImpl.setCompanyId(getCompanyId());
        multiMediaImpl.setUserId(getUserId());
        multiMediaImpl.setCreateDate(getCreateDate());
        multiMediaImpl.setModifiedDate(getModifiedDate());
        multiMediaImpl.setName(getName());
        multiMediaImpl.setType(getType());
        multiMediaImpl.setImageId(getImageId());
        multiMediaImpl.setApplicationId(getApplicationId());

        multiMediaImpl.resetOriginalValues();

        return multiMediaImpl;
    }

    public int compareTo(MultiMedia multiMedia) {
        long primaryKey = multiMedia.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        MultiMedia multiMedia = null;

        try {
            multiMedia = (MultiMedia) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = multiMedia.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        MultiMediaModelImpl multiMediaModelImpl = this;

        multiMediaModelImpl._originalCompanyId = multiMediaModelImpl._companyId;

        multiMediaModelImpl._setOriginalCompanyId = false;

        multiMediaModelImpl._originalImageId = multiMediaModelImpl._imageId;

        multiMediaModelImpl._setOriginalImageId = false;

        multiMediaModelImpl._originalApplicationId = multiMediaModelImpl._applicationId;

        multiMediaModelImpl._setOriginalApplicationId = false;

        multiMediaModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<MultiMedia> toCacheModel() {
        MultiMediaCacheModel multiMediaCacheModel = new MultiMediaCacheModel();

        multiMediaCacheModel.multiMediaId = getMultiMediaId();

        multiMediaCacheModel.companyId = getCompanyId();

        multiMediaCacheModel.userId = getUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            multiMediaCacheModel.createDate = createDate.getTime();
        } else {
            multiMediaCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            multiMediaCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            multiMediaCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        multiMediaCacheModel.name = getName();

        String name = multiMediaCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            multiMediaCacheModel.name = null;
        }

        multiMediaCacheModel.type = getType();

        multiMediaCacheModel.imageId = getImageId();

        multiMediaCacheModel.applicationId = getApplicationId();

        return multiMediaCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{multiMediaId=");
        sb.append(getMultiMediaId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", type=");
        sb.append(getType());
        sb.append(", imageId=");
        sb.append(getImageId());
        sb.append(", applicationId=");
        sb.append(getApplicationId());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("de.fraunhofer.fokus.movepla.model.MultiMedia");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>multiMediaId</column-name><column-value><![CDATA[");
        sb.append(getMultiMediaId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>type</column-name><column-value><![CDATA[");
        sb.append(getType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>imageId</column-name><column-value><![CDATA[");
        sb.append(getImageId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>applicationId</column-name><column-value><![CDATA[");
        sb.append(getApplicationId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
