package de.fraunhofer.fokus.movepla.model.impl;

/*
 * #%L
 * govapps_data
 * $Id: ApplicationModelImpl.java 566 2014-11-13 15:22:01Z sma $
 * %%
 * Copyright (C) 2013 - 2014 Fraunhofer FOKUS / CC Ã–FIT
 * %%
 * Copyright (c) 2,013, Fraunhofer FOKUS, Kompetenzzentrum Oeffentliche IT 
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above copyright notice, 
 *    this list of conditions and the following disclaimer.
 * 
 * 2) Redistributions in binary form must reproduce the above copyright notice, 
 *    this list of conditions and the following disclaimer in the documentation 
 *    and/or other materials provided with the distribution.
 * 
 * 3) All advertising materials mentioning features or use of this software must 
 *    display the following acknowledgement: 
 *    This product includes software developed by Fraunhofer FOKUS, Kompetenzzentrum Oeffentliche IT.
 * 
 * 4) Neither the name of the organization nor the names of its contributors may 
 *    be used to endorse or promote products derived from this software without 
 *    specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY COPYRIGHT HOLDER ''AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL 
 * Fraunhofer FOKUS, Kompetenzzentrum Oeffentliche IT 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.fraunhofer.fokus.movepla.model.Application;
import de.fraunhofer.fokus.movepla.model.ApplicationModel;
import de.fraunhofer.fokus.movepla.model.ApplicationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Application service. Represents a row in the &quot;mvp_Application&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.fraunhofer.fokus.movepla.model.ApplicationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ApplicationImpl}.
 * </p>
 *
 * @author jpa
 * @see ApplicationImpl
 * @see de.fraunhofer.fokus.movepla.model.Application
 * @see de.fraunhofer.fokus.movepla.model.ApplicationModel
 * @generated
 */
@JSON(strict = true)
public class ApplicationModelImpl extends BaseModelImpl<Application>
    implements ApplicationModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a application model instance should use the {@link de.fraunhofer.fokus.movepla.model.Application} interface instead.
     */
    public static final String TABLE_NAME = "mvp_Application";
    public static final Object[][] TABLE_COLUMNS = {
            { "applicationId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "name", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "version", Types.VARCHAR },
            { "versionInformation", Types.VARCHAR },
            { "size_", Types.INTEGER },
            { "firstPublishingDate", Types.TIMESTAMP },
            { "lastModifiedDate", Types.TIMESTAMP },
            { "logoImageId", Types.BIGINT },
            { "fee", Types.INTEGER },
            { "targetOS", Types.VARCHAR },
            { "minTargetOSVersion", Types.INTEGER },
            { "targetCategory", Types.VARCHAR },
            { "lifeCycleStatus", Types.INTEGER },
            { "verifiedDate", Types.TIMESTAMP },
            { "categoryString", Types.VARCHAR },
            { "regionString", Types.VARCHAR },
            { "lifeCycleStatusString", Types.VARCHAR },
            { "legalDetails", Types.VARCHAR },
            { "developer", Types.VARCHAR },
            { "detailsViewed", Types.BIGINT },
            { "linkClicked", Types.BIGINT },
            { "useOpenData", Types.INTEGER },
            { "Sector", Types.VARCHAR },
            { "License", Types.VARCHAR },
            { "relatedApplicationId", Types.VARCHAR },
            { "newVersionId", Types.BIGINT },
            { "oldVersionId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table mvp_Application (applicationId LONG not null primary key,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,description VARCHAR(75) null,version VARCHAR(75) null,versionInformation VARCHAR(75) null,size_ INTEGER,firstPublishingDate DATE null,lastModifiedDate DATE null,logoImageId LONG,fee INTEGER,targetOS VARCHAR(75) null,minTargetOSVersion INTEGER,targetCategory VARCHAR(75) null,lifeCycleStatus INTEGER,verifiedDate DATE null,categoryString VARCHAR(75) null,regionString VARCHAR(75) null,lifeCycleStatusString VARCHAR(75) null,legalDetails VARCHAR(75) null,developer VARCHAR(75) null,detailsViewed LONG,linkClicked LONG,useOpenData INTEGER,Sector VARCHAR(75) null,License VARCHAR(75) null,relatedApplicationId VARCHAR(75) null,newVersionId LONG,oldVersionId LONG)";
    public static final String TABLE_SQL_DROP = "drop table mvp_Application";
    public static final String ORDER_BY_JPQL = " ORDER BY application.name ASC";
    public static final String ORDER_BY_SQL = " ORDER BY mvp_Application.name ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.de.fraunhofer.fokus.movepla.model.Application"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.de.fraunhofer.fokus.movepla.model.Application"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.de.fraunhofer.fokus.movepla.model.Application"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long DETAILSVIEWED_COLUMN_BITMASK = 2L;
    public static long LIFECYCLESTATUS_COLUMN_BITMASK = 4L;
    public static long LINKCLICKED_COLUMN_BITMASK = 8L;
    public static long MODIFIEDDATE_COLUMN_BITMASK = 16L;
    public static long USEOPENDATA_COLUMN_BITMASK = 32L;
    public static long USERID_COLUMN_BITMASK = 64L;
    public static final String MAPPING_TABLE_MVP_APPLICATION_CATEGORY_NAME = "mvp_Application_Category";
    public static final Object[][] MAPPING_TABLE_MVP_APPLICATION_CATEGORY_COLUMNS =
        {
            { "categoryId", Types.BIGINT },
            { "applicationId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_MVP_APPLICATION_CATEGORY_SQL_CREATE =
        "create table mvp_Application_Category (categoryId LONG not null,applicationId LONG not null,primary key (categoryId, applicationId))";
    public static final boolean FINDER_CACHE_ENABLED_MVP_APPLICATION_CATEGORY = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.mvp_Application_Category"),
            true);
    public static final String MAPPING_TABLE_MVP_APPLICATION_REGION_NAME = "mvp_Application_Region";
    public static final Object[][] MAPPING_TABLE_MVP_APPLICATION_REGION_COLUMNS = {
            { "regionId", Types.BIGINT },
            { "applicationId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_MVP_APPLICATION_REGION_SQL_CREATE = "create table mvp_Application_Region (regionId LONG not null,applicationId LONG not null,primary key (regionId, applicationId))";
    public static final boolean FINDER_CACHE_ENABLED_MVP_APPLICATION_REGION = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.mvp_Application_Region"),
            true);
    public static final String MAPPING_TABLE_MVP_APPLICATION_LANGUAGE_NAME = "mvp_Application_Language";
    public static final Object[][] MAPPING_TABLE_MVP_APPLICATION_LANGUAGE_COLUMNS =
        {
            { "LanguageId", Types.BIGINT },
            { "applicationId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_MVP_APPLICATION_LANGUAGE_SQL_CREATE =
        "create table mvp_Application_Language (LanguageId LONG not null,applicationId LONG not null,primary key (LanguageId, applicationId))";
    public static final boolean FINDER_CACHE_ENABLED_MVP_APPLICATION_LANGUAGE = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.mvp_Application_Language"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.de.fraunhofer.fokus.movepla.model.Application"));
    private static ClassLoader _classLoader = Application.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            Application.class
        };
    private long _applicationId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private Date _createDate;
    private Date _modifiedDate;
    private Date _originalModifiedDate;
    private String _name;
    private String _description;
    private String _version;
    private String _versionInformation;
    private int _size;
    private Date _firstPublishingDate;
    private Date _lastModifiedDate;
    private long _logoImageId;
    private int _fee;
    private String _targetOS;
    private int _minTargetOSVersion;
    private String _targetCategory;
    private int _lifeCycleStatus;
    private int _originalLifeCycleStatus;
    private boolean _setOriginalLifeCycleStatus;
    private Date _verifiedDate;
    private String _categoryString;
    private String _regionString;
    private String _lifeCycleStatusString;
    private String _legalDetails;
    private String _developer;
    private long _detailsViewed;
    private long _originalDetailsViewed;
    private boolean _setOriginalDetailsViewed;
    private long _linkClicked;
    private long _originalLinkClicked;
    private boolean _setOriginalLinkClicked;
    private int _useOpenData;
    private int _originalUseOpenData;
    private boolean _setOriginalUseOpenData;
    private String _Sector;
    private String _License;
    private String _relatedApplicationId;
    private long _newVersionId;
    private long _oldVersionId;
    private long _columnBitmask;
    private Application _escapedModelProxy;

    public ApplicationModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Application toModel(ApplicationSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Application model = new ApplicationImpl();

        model.setApplicationId(soapModel.getApplicationId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setName(soapModel.getName());
        model.setDescription(soapModel.getDescription());
        model.setVersion(soapModel.getVersion());
        model.setVersionInformation(soapModel.getVersionInformation());
        model.setSize(soapModel.getSize());
        model.setFirstPublishingDate(soapModel.getFirstPublishingDate());
        model.setLastModifiedDate(soapModel.getLastModifiedDate());
        model.setLogoImageId(soapModel.getLogoImageId());
        model.setFee(soapModel.getFee());
        model.setTargetOS(soapModel.getTargetOS());
        model.setMinTargetOSVersion(soapModel.getMinTargetOSVersion());
        model.setTargetCategory(soapModel.getTargetCategory());
        model.setLifeCycleStatus(soapModel.getLifeCycleStatus());
        model.setVerifiedDate(soapModel.getVerifiedDate());
        model.setCategoryString(soapModel.getCategoryString());
        model.setRegionString(soapModel.getRegionString());
        model.setLifeCycleStatusString(soapModel.getLifeCycleStatusString());
        model.setLegalDetails(soapModel.getLegalDetails());
        model.setDeveloper(soapModel.getDeveloper());
        model.setDetailsViewed(soapModel.getDetailsViewed());
        model.setLinkClicked(soapModel.getLinkClicked());
        model.setUseOpenData(soapModel.getUseOpenData());
        model.setSector(soapModel.getSector());
        model.setLicense(soapModel.getLicense());
        model.setRelatedApplicationId(soapModel.getRelatedApplicationId());
        model.setNewVersionId(soapModel.getNewVersionId());
        model.setOldVersionId(soapModel.getOldVersionId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Application> toModels(ApplicationSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Application> models = new ArrayList<Application>(soapModels.length);

        for (ApplicationSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _applicationId;
    }

    public void setPrimaryKey(long primaryKey) {
        setApplicationId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_applicationId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return Application.class;
    }

    public String getModelClassName() {
        return Application.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("applicationId", getApplicationId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("name", getName());
        attributes.put("description", getDescription());
        attributes.put("version", getVersion());
        attributes.put("versionInformation", getVersionInformation());
        attributes.put("size", getSize());
        attributes.put("firstPublishingDate", getFirstPublishingDate());
        attributes.put("lastModifiedDate", getLastModifiedDate());
        attributes.put("logoImageId", getLogoImageId());
        attributes.put("fee", getFee());
        attributes.put("targetOS", getTargetOS());
        attributes.put("minTargetOSVersion", getMinTargetOSVersion());
        attributes.put("targetCategory", getTargetCategory());
        attributes.put("lifeCycleStatus", getLifeCycleStatus());
        attributes.put("verifiedDate", getVerifiedDate());
        attributes.put("categoryString", getCategoryString());
        attributes.put("regionString", getRegionString());
        attributes.put("lifeCycleStatusString", getLifeCycleStatusString());
        attributes.put("legalDetails", getLegalDetails());
        attributes.put("developer", getDeveloper());
        attributes.put("detailsViewed", getDetailsViewed());
        attributes.put("linkClicked", getLinkClicked());
        attributes.put("useOpenData", getUseOpenData());
        attributes.put("Sector", getSector());
        attributes.put("License", getLicense());
        attributes.put("relatedApplicationId", getRelatedApplicationId());
        attributes.put("newVersionId", getNewVersionId());
        attributes.put("oldVersionId", getOldVersionId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long applicationId = (Long) attributes.get("applicationId");

        if (applicationId != null) {
            setApplicationId(applicationId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        String version = (String) attributes.get("version");

        if (version != null) {
            setVersion(version);
        }

        String versionInformation = (String) attributes.get(
                "versionInformation");

        if (versionInformation != null) {
            setVersionInformation(versionInformation);
        }

        Integer size = (Integer) attributes.get("size");

        if (size != null) {
            setSize(size);
        }

        Date firstPublishingDate = (Date) attributes.get("firstPublishingDate");

        if (firstPublishingDate != null) {
            setFirstPublishingDate(firstPublishingDate);
        }

        Date lastModifiedDate = (Date) attributes.get("lastModifiedDate");

        if (lastModifiedDate != null) {
            setLastModifiedDate(lastModifiedDate);
        }

        Long logoImageId = (Long) attributes.get("logoImageId");

        if (logoImageId != null) {
            setLogoImageId(logoImageId);
        }

        Integer fee = (Integer) attributes.get("fee");

        if (fee != null) {
            setFee(fee);
        }

        String targetOS = (String) attributes.get("targetOS");

        if (targetOS != null) {
            setTargetOS(targetOS);
        }

        Integer minTargetOSVersion = (Integer) attributes.get(
                "minTargetOSVersion");

        if (minTargetOSVersion != null) {
            setMinTargetOSVersion(minTargetOSVersion);
        }

        String targetCategory = (String) attributes.get("targetCategory");

        if (targetCategory != null) {
            setTargetCategory(targetCategory);
        }

        Integer lifeCycleStatus = (Integer) attributes.get("lifeCycleStatus");

        if (lifeCycleStatus != null) {
            setLifeCycleStatus(lifeCycleStatus);
        }

        Date verifiedDate = (Date) attributes.get("verifiedDate");

        if (verifiedDate != null) {
            setVerifiedDate(verifiedDate);
        }

        String categoryString = (String) attributes.get("categoryString");

        if (categoryString != null) {
            setCategoryString(categoryString);
        }

        String regionString = (String) attributes.get("regionString");

        if (regionString != null) {
            setRegionString(regionString);
        }

        String lifeCycleStatusString = (String) attributes.get(
                "lifeCycleStatusString");

        if (lifeCycleStatusString != null) {
            setLifeCycleStatusString(lifeCycleStatusString);
        }

        String legalDetails = (String) attributes.get("legalDetails");

        if (legalDetails != null) {
            setLegalDetails(legalDetails);
        }

        String developer = (String) attributes.get("developer");

        if (developer != null) {
            setDeveloper(developer);
        }

        Long detailsViewed = (Long) attributes.get("detailsViewed");

        if (detailsViewed != null) {
            setDetailsViewed(detailsViewed);
        }

        Long linkClicked = (Long) attributes.get("linkClicked");

        if (linkClicked != null) {
            setLinkClicked(linkClicked);
        }

        Integer useOpenData = (Integer) attributes.get("useOpenData");

        if (useOpenData != null) {
            setUseOpenData(useOpenData);
        }

        String Sector = (String) attributes.get("Sector");

        if (Sector != null) {
            setSector(Sector);
        }

        String License = (String) attributes.get("License");

        if (License != null) {
            setLicense(License);
        }

        String relatedApplicationId = (String) attributes.get(
                "relatedApplicationId");

        if (relatedApplicationId != null) {
            setRelatedApplicationId(relatedApplicationId);
        }

        Long newVersionId = (Long) attributes.get("newVersionId");

        if (newVersionId != null) {
            setNewVersionId(newVersionId);
        }

        Long oldVersionId = (Long) attributes.get("oldVersionId");

        if (oldVersionId != null) {
            setOldVersionId(oldVersionId);
        }
    }

    @JSON
    public long getApplicationId() {
        return _applicationId;
    }

    public void setApplicationId(long applicationId) {
        _applicationId = applicationId;
    }

    @JSON
    public long getCompanyId() {
        return _companyId;
    }

    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @JSON
    public long getUserId() {
        return _userId;
    }

    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @JSON
    public Date getCreateDate() {
        return _createDate;
    }

    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    public void setModifiedDate(Date modifiedDate) {
        _columnBitmask |= MODIFIEDDATE_COLUMN_BITMASK;

        if (_originalModifiedDate == null) {
            _originalModifiedDate = _modifiedDate;
        }

        _modifiedDate = modifiedDate;
    }

    public Date getOriginalModifiedDate() {
        return _originalModifiedDate;
    }

    @JSON
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    public void setName(String name) {
        _columnBitmask = -1L;

        _name = name;
    }

    @JSON
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    public String getVersion() {
        if (_version == null) {
            return StringPool.BLANK;
        } else {
            return _version;
        }
    }

    public void setVersion(String version) {
        _version = version;
    }

    @JSON
    public String getVersionInformation() {
        if (_versionInformation == null) {
            return StringPool.BLANK;
        } else {
            return _versionInformation;
        }
    }

    public void setVersionInformation(String versionInformation) {
        _versionInformation = versionInformation;
    }

    @JSON
    public int getSize() {
        return _size;
    }

    public void setSize(int size) {
        _size = size;
    }

    @JSON
    public Date getFirstPublishingDate() {
        return _firstPublishingDate;
    }

    public void setFirstPublishingDate(Date firstPublishingDate) {
        _firstPublishingDate = firstPublishingDate;
    }

    @JSON
    public Date getLastModifiedDate() {
        return _lastModifiedDate;
    }

    public void setLastModifiedDate(Date lastModifiedDate) {
        _lastModifiedDate = lastModifiedDate;
    }

    @JSON
    public long getLogoImageId() {
        return _logoImageId;
    }

    public void setLogoImageId(long logoImageId) {
        _logoImageId = logoImageId;
    }

    @JSON
    public int getFee() {
        return _fee;
    }

    public void setFee(int fee) {
        _fee = fee;
    }

    @JSON
    public String getTargetOS() {
        if (_targetOS == null) {
            return StringPool.BLANK;
        } else {
            return _targetOS;
        }
    }

    public void setTargetOS(String targetOS) {
        _targetOS = targetOS;
    }

    @JSON
    public int getMinTargetOSVersion() {
        return _minTargetOSVersion;
    }

    public void setMinTargetOSVersion(int minTargetOSVersion) {
        _minTargetOSVersion = minTargetOSVersion;
    }

    @JSON
    public String getTargetCategory() {
        if (_targetCategory == null) {
            return StringPool.BLANK;
        } else {
            return _targetCategory;
        }
    }

    public void setTargetCategory(String targetCategory) {
        _targetCategory = targetCategory;
    }

    @JSON
    public int getLifeCycleStatus() {
        return _lifeCycleStatus;
    }

    public void setLifeCycleStatus(int lifeCycleStatus) {
        _columnBitmask |= LIFECYCLESTATUS_COLUMN_BITMASK;

        if (!_setOriginalLifeCycleStatus) {
            _setOriginalLifeCycleStatus = true;

            _originalLifeCycleStatus = _lifeCycleStatus;
        }

        _lifeCycleStatus = lifeCycleStatus;
    }

    public int getOriginalLifeCycleStatus() {
        return _originalLifeCycleStatus;
    }

    @JSON
    public Date getVerifiedDate() {
        return _verifiedDate;
    }

    public void setVerifiedDate(Date verifiedDate) {
        _verifiedDate = verifiedDate;
    }

    @JSON
    public String getCategoryString() {
        if (_categoryString == null) {
            return StringPool.BLANK;
        } else {
            return _categoryString;
        }
    }

    public void setCategoryString(String categoryString) {
        _categoryString = categoryString;
    }

    @JSON
    public String getRegionString() {
        if (_regionString == null) {
            return StringPool.BLANK;
        } else {
            return _regionString;
        }
    }

    public void setRegionString(String regionString) {
        _regionString = regionString;
    }

    @JSON
    public String getLifeCycleStatusString() {
        if (_lifeCycleStatusString == null) {
            return StringPool.BLANK;
        } else {
            return _lifeCycleStatusString;
        }
    }

    public void setLifeCycleStatusString(String lifeCycleStatusString) {
        _lifeCycleStatusString = lifeCycleStatusString;
    }

    @JSON
    public String getLegalDetails() {
        if (_legalDetails == null) {
            return StringPool.BLANK;
        } else {
            return _legalDetails;
        }
    }

    public void setLegalDetails(String legalDetails) {
        _legalDetails = legalDetails;
    }

    @JSON
    public String getDeveloper() {
        if (_developer == null) {
            return StringPool.BLANK;
        } else {
            return _developer;
        }
    }

    public void setDeveloper(String developer) {
        _developer = developer;
    }

    @JSON
    public long getDetailsViewed() {
        return _detailsViewed;
    }

    public void setDetailsViewed(long detailsViewed) {
        _columnBitmask |= DETAILSVIEWED_COLUMN_BITMASK;

        if (!_setOriginalDetailsViewed) {
            _setOriginalDetailsViewed = true;

            _originalDetailsViewed = _detailsViewed;
        }

        _detailsViewed = detailsViewed;
    }

    public long getOriginalDetailsViewed() {
        return _originalDetailsViewed;
    }

    @JSON
    public long getLinkClicked() {
        return _linkClicked;
    }

    public void setLinkClicked(long linkClicked) {
        _columnBitmask |= LINKCLICKED_COLUMN_BITMASK;

        if (!_setOriginalLinkClicked) {
            _setOriginalLinkClicked = true;

            _originalLinkClicked = _linkClicked;
        }

        _linkClicked = linkClicked;
    }

    public long getOriginalLinkClicked() {
        return _originalLinkClicked;
    }

    @JSON
    public int getUseOpenData() {
        return _useOpenData;
    }

    public void setUseOpenData(int useOpenData) {
        _columnBitmask |= USEOPENDATA_COLUMN_BITMASK;

        if (!_setOriginalUseOpenData) {
            _setOriginalUseOpenData = true;

            _originalUseOpenData = _useOpenData;
        }

        _useOpenData = useOpenData;
    }

    public int getOriginalUseOpenData() {
        return _originalUseOpenData;
    }

    @JSON
    public String getSector() {
        if (_Sector == null) {
            return StringPool.BLANK;
        } else {
            return _Sector;
        }
    }

    public void setSector(String Sector) {
        _Sector = Sector;
    }

    @JSON
    public String getLicense() {
        if (_License == null) {
            return StringPool.BLANK;
        } else {
            return _License;
        }
    }

    public void setLicense(String License) {
        _License = License;
    }

    @JSON
    public String getRelatedApplicationId() {
        if (_relatedApplicationId == null) {
            return StringPool.BLANK;
        } else {
            return _relatedApplicationId;
        }
    }

    public void setRelatedApplicationId(String relatedApplicationId) {
        _relatedApplicationId = relatedApplicationId;
    }

    @JSON
    public long getNewVersionId() {
        return _newVersionId;
    }

    public void setNewVersionId(long newVersionId) {
        _newVersionId = newVersionId;
    }

    @JSON
    public long getOldVersionId() {
        return _oldVersionId;
    }

    public void setOldVersionId(long oldVersionId) {
        _oldVersionId = oldVersionId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Application.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Application toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (Application) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        ApplicationImpl applicationImpl = new ApplicationImpl();

        applicationImpl.setApplicationId(getApplicationId());
        applicationImpl.setCompanyId(getCompanyId());
        applicationImpl.setUserId(getUserId());
        applicationImpl.setCreateDate(getCreateDate());
        applicationImpl.setModifiedDate(getModifiedDate());
        applicationImpl.setName(getName());
        applicationImpl.setDescription(getDescription());
        applicationImpl.setVersion(getVersion());
        applicationImpl.setVersionInformation(getVersionInformation());
        applicationImpl.setSize(getSize());
        applicationImpl.setFirstPublishingDate(getFirstPublishingDate());
        applicationImpl.setLastModifiedDate(getLastModifiedDate());
        applicationImpl.setLogoImageId(getLogoImageId());
        applicationImpl.setFee(getFee());
        applicationImpl.setTargetOS(getTargetOS());
        applicationImpl.setMinTargetOSVersion(getMinTargetOSVersion());
        applicationImpl.setTargetCategory(getTargetCategory());
        applicationImpl.setLifeCycleStatus(getLifeCycleStatus());
        applicationImpl.setVerifiedDate(getVerifiedDate());
        applicationImpl.setCategoryString(getCategoryString());
        applicationImpl.setRegionString(getRegionString());
        applicationImpl.setLifeCycleStatusString(getLifeCycleStatusString());
        applicationImpl.setLegalDetails(getLegalDetails());
        applicationImpl.setDeveloper(getDeveloper());
        applicationImpl.setDetailsViewed(getDetailsViewed());
        applicationImpl.setLinkClicked(getLinkClicked());
        applicationImpl.setUseOpenData(getUseOpenData());
        applicationImpl.setSector(getSector());
        applicationImpl.setLicense(getLicense());
        applicationImpl.setRelatedApplicationId(getRelatedApplicationId());
        applicationImpl.setNewVersionId(getNewVersionId());
        applicationImpl.setOldVersionId(getOldVersionId());

        applicationImpl.resetOriginalValues();

        return applicationImpl;
    }

    public int compareTo(Application application) {
        int value = 0;

        value = getName().compareTo(application.getName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        Application application = null;

        try {
            application = (Application) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = application.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ApplicationModelImpl applicationModelImpl = this;

        applicationModelImpl._originalCompanyId = applicationModelImpl._companyId;

        applicationModelImpl._setOriginalCompanyId = false;

        applicationModelImpl._originalUserId = applicationModelImpl._userId;

        applicationModelImpl._setOriginalUserId = false;

        applicationModelImpl._originalModifiedDate = applicationModelImpl._modifiedDate;

        applicationModelImpl._originalLifeCycleStatus = applicationModelImpl._lifeCycleStatus;

        applicationModelImpl._setOriginalLifeCycleStatus = false;

        applicationModelImpl._originalDetailsViewed = applicationModelImpl._detailsViewed;

        applicationModelImpl._setOriginalDetailsViewed = false;

        applicationModelImpl._originalLinkClicked = applicationModelImpl._linkClicked;

        applicationModelImpl._setOriginalLinkClicked = false;

        applicationModelImpl._originalUseOpenData = applicationModelImpl._useOpenData;

        applicationModelImpl._setOriginalUseOpenData = false;

        applicationModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Application> toCacheModel() {
        ApplicationCacheModel applicationCacheModel = new ApplicationCacheModel();

        applicationCacheModel.applicationId = getApplicationId();

        applicationCacheModel.companyId = getCompanyId();

        applicationCacheModel.userId = getUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            applicationCacheModel.createDate = createDate.getTime();
        } else {
            applicationCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            applicationCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            applicationCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        applicationCacheModel.name = getName();

        String name = applicationCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            applicationCacheModel.name = null;
        }

        applicationCacheModel.description = getDescription();

        String description = applicationCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            applicationCacheModel.description = null;
        }

        applicationCacheModel.version = getVersion();

        String version = applicationCacheModel.version;

        if ((version != null) && (version.length() == 0)) {
            applicationCacheModel.version = null;
        }

        applicationCacheModel.versionInformation = getVersionInformation();

        String versionInformation = applicationCacheModel.versionInformation;

        if ((versionInformation != null) && (versionInformation.length() == 0)) {
            applicationCacheModel.versionInformation = null;
        }

        applicationCacheModel.size = getSize();

        Date firstPublishingDate = getFirstPublishingDate();

        if (firstPublishingDate != null) {
            applicationCacheModel.firstPublishingDate = firstPublishingDate.getTime();
        } else {
            applicationCacheModel.firstPublishingDate = Long.MIN_VALUE;
        }

        Date lastModifiedDate = getLastModifiedDate();

        if (lastModifiedDate != null) {
            applicationCacheModel.lastModifiedDate = lastModifiedDate.getTime();
        } else {
            applicationCacheModel.lastModifiedDate = Long.MIN_VALUE;
        }

        applicationCacheModel.logoImageId = getLogoImageId();

        applicationCacheModel.fee = getFee();

        applicationCacheModel.targetOS = getTargetOS();

        String targetOS = applicationCacheModel.targetOS;

        if ((targetOS != null) && (targetOS.length() == 0)) {
            applicationCacheModel.targetOS = null;
        }

        applicationCacheModel.minTargetOSVersion = getMinTargetOSVersion();

        applicationCacheModel.targetCategory = getTargetCategory();

        String targetCategory = applicationCacheModel.targetCategory;

        if ((targetCategory != null) && (targetCategory.length() == 0)) {
            applicationCacheModel.targetCategory = null;
        }

        applicationCacheModel.lifeCycleStatus = getLifeCycleStatus();

        Date verifiedDate = getVerifiedDate();

        if (verifiedDate != null) {
            applicationCacheModel.verifiedDate = verifiedDate.getTime();
        } else {
            applicationCacheModel.verifiedDate = Long.MIN_VALUE;
        }

        applicationCacheModel.categoryString = getCategoryString();

        String categoryString = applicationCacheModel.categoryString;

        if ((categoryString != null) && (categoryString.length() == 0)) {
            applicationCacheModel.categoryString = null;
        }

        applicationCacheModel.regionString = getRegionString();

        String regionString = applicationCacheModel.regionString;

        if ((regionString != null) && (regionString.length() == 0)) {
            applicationCacheModel.regionString = null;
        }

        applicationCacheModel.lifeCycleStatusString = getLifeCycleStatusString();

        String lifeCycleStatusString = applicationCacheModel.lifeCycleStatusString;

        if ((lifeCycleStatusString != null) &&
                (lifeCycleStatusString.length() == 0)) {
            applicationCacheModel.lifeCycleStatusString = null;
        }

        applicationCacheModel.legalDetails = getLegalDetails();

        String legalDetails = applicationCacheModel.legalDetails;

        if ((legalDetails != null) && (legalDetails.length() == 0)) {
            applicationCacheModel.legalDetails = null;
        }

        applicationCacheModel.developer = getDeveloper();

        String developer = applicationCacheModel.developer;

        if ((developer != null) && (developer.length() == 0)) {
            applicationCacheModel.developer = null;
        }

        applicationCacheModel.detailsViewed = getDetailsViewed();

        applicationCacheModel.linkClicked = getLinkClicked();

        applicationCacheModel.useOpenData = getUseOpenData();

        applicationCacheModel.Sector = getSector();

        String Sector = applicationCacheModel.Sector;

        if ((Sector != null) && (Sector.length() == 0)) {
            applicationCacheModel.Sector = null;
        }

        applicationCacheModel.License = getLicense();

        String License = applicationCacheModel.License;

        if ((License != null) && (License.length() == 0)) {
            applicationCacheModel.License = null;
        }

        applicationCacheModel.relatedApplicationId = getRelatedApplicationId();

        String relatedApplicationId = applicationCacheModel.relatedApplicationId;

        if ((relatedApplicationId != null) &&
                (relatedApplicationId.length() == 0)) {
            applicationCacheModel.relatedApplicationId = null;
        }

        applicationCacheModel.newVersionId = getNewVersionId();

        applicationCacheModel.oldVersionId = getOldVersionId();

        return applicationCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(65);

        sb.append("{applicationId=");
        sb.append(getApplicationId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", version=");
        sb.append(getVersion());
        sb.append(", versionInformation=");
        sb.append(getVersionInformation());
        sb.append(", size=");
        sb.append(getSize());
        sb.append(", firstPublishingDate=");
        sb.append(getFirstPublishingDate());
        sb.append(", lastModifiedDate=");
        sb.append(getLastModifiedDate());
        sb.append(", logoImageId=");
        sb.append(getLogoImageId());
        sb.append(", fee=");
        sb.append(getFee());
        sb.append(", targetOS=");
        sb.append(getTargetOS());
        sb.append(", minTargetOSVersion=");
        sb.append(getMinTargetOSVersion());
        sb.append(", targetCategory=");
        sb.append(getTargetCategory());
        sb.append(", lifeCycleStatus=");
        sb.append(getLifeCycleStatus());
        sb.append(", verifiedDate=");
        sb.append(getVerifiedDate());
        sb.append(", categoryString=");
        sb.append(getCategoryString());
        sb.append(", regionString=");
        sb.append(getRegionString());
        sb.append(", lifeCycleStatusString=");
        sb.append(getLifeCycleStatusString());
        sb.append(", legalDetails=");
        sb.append(getLegalDetails());
        sb.append(", developer=");
        sb.append(getDeveloper());
        sb.append(", detailsViewed=");
        sb.append(getDetailsViewed());
        sb.append(", linkClicked=");
        sb.append(getLinkClicked());
        sb.append(", useOpenData=");
        sb.append(getUseOpenData());
        sb.append(", Sector=");
        sb.append(getSector());
        sb.append(", License=");
        sb.append(getLicense());
        sb.append(", relatedApplicationId=");
        sb.append(getRelatedApplicationId());
        sb.append(", newVersionId=");
        sb.append(getNewVersionId());
        sb.append(", oldVersionId=");
        sb.append(getOldVersionId());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(100);

        sb.append("<model><model-name>");
        sb.append("de.fraunhofer.fokus.movepla.model.Application");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>applicationId</column-name><column-value><![CDATA[");
        sb.append(getApplicationId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>version</column-name><column-value><![CDATA[");
        sb.append(getVersion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>versionInformation</column-name><column-value><![CDATA[");
        sb.append(getVersionInformation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>size</column-name><column-value><![CDATA[");
        sb.append(getSize());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>firstPublishingDate</column-name><column-value><![CDATA[");
        sb.append(getFirstPublishingDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastModifiedDate</column-name><column-value><![CDATA[");
        sb.append(getLastModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>logoImageId</column-name><column-value><![CDATA[");
        sb.append(getLogoImageId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fee</column-name><column-value><![CDATA[");
        sb.append(getFee());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>targetOS</column-name><column-value><![CDATA[");
        sb.append(getTargetOS());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>minTargetOSVersion</column-name><column-value><![CDATA[");
        sb.append(getMinTargetOSVersion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>targetCategory</column-name><column-value><![CDATA[");
        sb.append(getTargetCategory());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lifeCycleStatus</column-name><column-value><![CDATA[");
        sb.append(getLifeCycleStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>verifiedDate</column-name><column-value><![CDATA[");
        sb.append(getVerifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>categoryString</column-name><column-value><![CDATA[");
        sb.append(getCategoryString());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>regionString</column-name><column-value><![CDATA[");
        sb.append(getRegionString());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lifeCycleStatusString</column-name><column-value><![CDATA[");
        sb.append(getLifeCycleStatusString());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>legalDetails</column-name><column-value><![CDATA[");
        sb.append(getLegalDetails());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>developer</column-name><column-value><![CDATA[");
        sb.append(getDeveloper());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>detailsViewed</column-name><column-value><![CDATA[");
        sb.append(getDetailsViewed());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>linkClicked</column-name><column-value><![CDATA[");
        sb.append(getLinkClicked());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>useOpenData</column-name><column-value><![CDATA[");
        sb.append(getUseOpenData());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Sector</column-name><column-value><![CDATA[");
        sb.append(getSector());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>License</column-name><column-value><![CDATA[");
        sb.append(getLicense());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>relatedApplicationId</column-name><column-value><![CDATA[");
        sb.append(getRelatedApplicationId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>newVersionId</column-name><column-value><![CDATA[");
        sb.append(getNewVersionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>oldVersionId</column-name><column-value><![CDATA[");
        sb.append(getOldVersionId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
