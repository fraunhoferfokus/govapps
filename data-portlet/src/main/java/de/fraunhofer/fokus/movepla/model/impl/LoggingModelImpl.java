package de.fraunhofer.fokus.movepla.model.impl;

/*
 * #%L
 * govapps_data
 * $Id: LoggingModelImpl.java 566 2014-11-13 15:22:01Z sma $
 * %%
 * Copyright (C) 2013 - 2014 Fraunhofer FOKUS / CC Ã–FIT
 * %%
 * Copyright (c) 2,013, Fraunhofer FOKUS, Kompetenzzentrum Oeffentliche IT 
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above copyright notice, 
 *    this list of conditions and the following disclaimer.
 * 
 * 2) Redistributions in binary form must reproduce the above copyright notice, 
 *    this list of conditions and the following disclaimer in the documentation 
 *    and/or other materials provided with the distribution.
 * 
 * 3) All advertising materials mentioning features or use of this software must 
 *    display the following acknowledgement: 
 *    This product includes software developed by Fraunhofer FOKUS, Kompetenzzentrum Oeffentliche IT.
 * 
 * 4) Neither the name of the organization nor the names of its contributors may 
 *    be used to endorse or promote products derived from this software without 
 *    specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY COPYRIGHT HOLDER ''AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL 
 * Fraunhofer FOKUS, Kompetenzzentrum Oeffentliche IT 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.fraunhofer.fokus.movepla.model.Logging;
import de.fraunhofer.fokus.movepla.model.LoggingModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Logging service. Represents a row in the &quot;mvp_Logging&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.fraunhofer.fokus.movepla.model.LoggingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LoggingImpl}.
 * </p>
 *
 * @author jpa
 * @see LoggingImpl
 * @see de.fraunhofer.fokus.movepla.model.Logging
 * @see de.fraunhofer.fokus.movepla.model.LoggingModel
 * @generated
 */
public class LoggingModelImpl extends BaseModelImpl<Logging>
    implements LoggingModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a logging model instance should use the {@link de.fraunhofer.fokus.movepla.model.Logging} interface instead.
     */
    public static final String TABLE_NAME = "mvp_Logging";
    public static final Object[][] TABLE_COLUMNS = {
            { "loggingId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "isSimpleSearch", Types.BOOLEAN },
            { "searchString", Types.VARCHAR },
            { "categoryIDString", Types.VARCHAR },
            { "regionIDString", Types.VARCHAR },
            { "entitlementIDString", Types.VARCHAR },
            { "targetOS", Types.VARCHAR },
            { "fee", Types.INTEGER },
            { "targetCategory", Types.VARCHAR },
            { "passel", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table mvp_Logging (loggingId LONG not null primary key,createDate DATE null,modifiedDate DATE null,isSimpleSearch BOOLEAN,searchString VARCHAR(75) null,categoryIDString VARCHAR(75) null,regionIDString VARCHAR(75) null,entitlementIDString VARCHAR(75) null,targetOS VARCHAR(75) null,fee INTEGER,targetCategory VARCHAR(75) null,passel LONG)";
    public static final String TABLE_SQL_DROP = "drop table mvp_Logging";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.de.fraunhofer.fokus.movepla.model.Logging"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.de.fraunhofer.fokus.movepla.model.Logging"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.de.fraunhofer.fokus.movepla.model.Logging"),
            true);
    public static long CATEGORYIDSTRING_COLUMN_BITMASK = 1L;
    public static long ENTITLEMENTIDSTRING_COLUMN_BITMASK = 2L;
    public static long FEE_COLUMN_BITMASK = 4L;
    public static long PASSEL_COLUMN_BITMASK = 8L;
    public static long REGIONIDSTRING_COLUMN_BITMASK = 16L;
    public static long SEARCHSTRING_COLUMN_BITMASK = 32L;
    public static long TARGETCATEGORY_COLUMN_BITMASK = 64L;
    public static long TARGETOS_COLUMN_BITMASK = 128L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.de.fraunhofer.fokus.movepla.model.Logging"));
    private static ClassLoader _classLoader = Logging.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            Logging.class
        };
    private long _loggingId;
    private Date _createDate;
    private Date _modifiedDate;
    private Boolean _isSimpleSearch;
    private String _searchString;
    private String _originalSearchString;
    private String _categoryIDString;
    private String _originalCategoryIDString;
    private String _regionIDString;
    private String _originalRegionIDString;
    private String _entitlementIDString;
    private String _originalEntitlementIDString;
    private String _targetOS;
    private String _originalTargetOS;
    private int _fee;
    private int _originalFee;
    private boolean _setOriginalFee;
    private String _targetCategory;
    private String _originalTargetCategory;
    private long _passel;
    private long _originalPassel;
    private boolean _setOriginalPassel;
    private long _columnBitmask;
    private Logging _escapedModelProxy;

    public LoggingModelImpl() {
    }

    public long getPrimaryKey() {
        return _loggingId;
    }

    public void setPrimaryKey(long primaryKey) {
        setLoggingId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_loggingId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return Logging.class;
    }

    public String getModelClassName() {
        return Logging.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("loggingId", getLoggingId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("isSimpleSearch", getIsSimpleSearch());
        attributes.put("searchString", getSearchString());
        attributes.put("categoryIDString", getCategoryIDString());
        attributes.put("regionIDString", getRegionIDString());
        attributes.put("entitlementIDString", getEntitlementIDString());
        attributes.put("targetOS", getTargetOS());
        attributes.put("fee", getFee());
        attributes.put("targetCategory", getTargetCategory());
        attributes.put("passel", getPassel());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long loggingId = (Long) attributes.get("loggingId");

        if (loggingId != null) {
            setLoggingId(loggingId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Boolean isSimpleSearch = (Boolean) attributes.get("isSimpleSearch");

        if (isSimpleSearch != null) {
            setIsSimpleSearch(isSimpleSearch);
        }

        String searchString = (String) attributes.get("searchString");

        if (searchString != null) {
            setSearchString(searchString);
        }

        String categoryIDString = (String) attributes.get("categoryIDString");

        if (categoryIDString != null) {
            setCategoryIDString(categoryIDString);
        }

        String regionIDString = (String) attributes.get("regionIDString");

        if (regionIDString != null) {
            setRegionIDString(regionIDString);
        }

        String entitlementIDString = (String) attributes.get(
                "entitlementIDString");

        if (entitlementIDString != null) {
            setEntitlementIDString(entitlementIDString);
        }

        String targetOS = (String) attributes.get("targetOS");

        if (targetOS != null) {
            setTargetOS(targetOS);
        }

        Integer fee = (Integer) attributes.get("fee");

        if (fee != null) {
            setFee(fee);
        }

        String targetCategory = (String) attributes.get("targetCategory");

        if (targetCategory != null) {
            setTargetCategory(targetCategory);
        }

        Long passel = (Long) attributes.get("passel");

        if (passel != null) {
            setPassel(passel);
        }
    }

    public long getLoggingId() {
        return _loggingId;
    }

    public void setLoggingId(long loggingId) {
        _loggingId = loggingId;
    }

    public Date getCreateDate() {
        return _createDate;
    }

    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    public Date getModifiedDate() {
        return _modifiedDate;
    }

    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    public Boolean getIsSimpleSearch() {
        return _isSimpleSearch;
    }

    public void setIsSimpleSearch(Boolean isSimpleSearch) {
        _isSimpleSearch = isSimpleSearch;
    }

    public String getSearchString() {
        if (_searchString == null) {
            return StringPool.BLANK;
        } else {
            return _searchString;
        }
    }

    public void setSearchString(String searchString) {
        _columnBitmask |= SEARCHSTRING_COLUMN_BITMASK;

        if (_originalSearchString == null) {
            _originalSearchString = _searchString;
        }

        _searchString = searchString;
    }

    public String getOriginalSearchString() {
        return GetterUtil.getString(_originalSearchString);
    }

    public String getCategoryIDString() {
        if (_categoryIDString == null) {
            return StringPool.BLANK;
        } else {
            return _categoryIDString;
        }
    }

    public void setCategoryIDString(String categoryIDString) {
        _columnBitmask |= CATEGORYIDSTRING_COLUMN_BITMASK;

        if (_originalCategoryIDString == null) {
            _originalCategoryIDString = _categoryIDString;
        }

        _categoryIDString = categoryIDString;
    }

    public String getOriginalCategoryIDString() {
        return GetterUtil.getString(_originalCategoryIDString);
    }

    public String getRegionIDString() {
        if (_regionIDString == null) {
            return StringPool.BLANK;
        } else {
            return _regionIDString;
        }
    }

    public void setRegionIDString(String regionIDString) {
        _columnBitmask |= REGIONIDSTRING_COLUMN_BITMASK;

        if (_originalRegionIDString == null) {
            _originalRegionIDString = _regionIDString;
        }

        _regionIDString = regionIDString;
    }

    public String getOriginalRegionIDString() {
        return GetterUtil.getString(_originalRegionIDString);
    }

    public String getEntitlementIDString() {
        if (_entitlementIDString == null) {
            return StringPool.BLANK;
        } else {
            return _entitlementIDString;
        }
    }

    public void setEntitlementIDString(String entitlementIDString) {
        _columnBitmask |= ENTITLEMENTIDSTRING_COLUMN_BITMASK;

        if (_originalEntitlementIDString == null) {
            _originalEntitlementIDString = _entitlementIDString;
        }

        _entitlementIDString = entitlementIDString;
    }

    public String getOriginalEntitlementIDString() {
        return GetterUtil.getString(_originalEntitlementIDString);
    }

    public String getTargetOS() {
        if (_targetOS == null) {
            return StringPool.BLANK;
        } else {
            return _targetOS;
        }
    }

    public void setTargetOS(String targetOS) {
        _columnBitmask |= TARGETOS_COLUMN_BITMASK;

        if (_originalTargetOS == null) {
            _originalTargetOS = _targetOS;
        }

        _targetOS = targetOS;
    }

    public String getOriginalTargetOS() {
        return GetterUtil.getString(_originalTargetOS);
    }

    public int getFee() {
        return _fee;
    }

    public void setFee(int fee) {
        _columnBitmask |= FEE_COLUMN_BITMASK;

        if (!_setOriginalFee) {
            _setOriginalFee = true;

            _originalFee = _fee;
        }

        _fee = fee;
    }

    public int getOriginalFee() {
        return _originalFee;
    }

    public String getTargetCategory() {
        if (_targetCategory == null) {
            return StringPool.BLANK;
        } else {
            return _targetCategory;
        }
    }

    public void setTargetCategory(String targetCategory) {
        _columnBitmask |= TARGETCATEGORY_COLUMN_BITMASK;

        if (_originalTargetCategory == null) {
            _originalTargetCategory = _targetCategory;
        }

        _targetCategory = targetCategory;
    }

    public String getOriginalTargetCategory() {
        return GetterUtil.getString(_originalTargetCategory);
    }

    public long getPassel() {
        return _passel;
    }

    public void setPassel(long passel) {
        _columnBitmask |= PASSEL_COLUMN_BITMASK;

        if (!_setOriginalPassel) {
            _setOriginalPassel = true;

            _originalPassel = _passel;
        }

        _passel = passel;
    }

    public long getOriginalPassel() {
        return _originalPassel;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Logging.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Logging toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (Logging) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        LoggingImpl loggingImpl = new LoggingImpl();

        loggingImpl.setLoggingId(getLoggingId());
        loggingImpl.setCreateDate(getCreateDate());
        loggingImpl.setModifiedDate(getModifiedDate());
        loggingImpl.setIsSimpleSearch(getIsSimpleSearch());
        loggingImpl.setSearchString(getSearchString());
        loggingImpl.setCategoryIDString(getCategoryIDString());
        loggingImpl.setRegionIDString(getRegionIDString());
        loggingImpl.setEntitlementIDString(getEntitlementIDString());
        loggingImpl.setTargetOS(getTargetOS());
        loggingImpl.setFee(getFee());
        loggingImpl.setTargetCategory(getTargetCategory());
        loggingImpl.setPassel(getPassel());

        loggingImpl.resetOriginalValues();

        return loggingImpl;
    }

    public int compareTo(Logging logging) {
        long primaryKey = logging.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        Logging logging = null;

        try {
            logging = (Logging) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = logging.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LoggingModelImpl loggingModelImpl = this;

        loggingModelImpl._originalSearchString = loggingModelImpl._searchString;

        loggingModelImpl._originalCategoryIDString = loggingModelImpl._categoryIDString;

        loggingModelImpl._originalRegionIDString = loggingModelImpl._regionIDString;

        loggingModelImpl._originalEntitlementIDString = loggingModelImpl._entitlementIDString;

        loggingModelImpl._originalTargetOS = loggingModelImpl._targetOS;

        loggingModelImpl._originalFee = loggingModelImpl._fee;

        loggingModelImpl._setOriginalFee = false;

        loggingModelImpl._originalTargetCategory = loggingModelImpl._targetCategory;

        loggingModelImpl._originalPassel = loggingModelImpl._passel;

        loggingModelImpl._setOriginalPassel = false;

        loggingModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Logging> toCacheModel() {
        LoggingCacheModel loggingCacheModel = new LoggingCacheModel();

        loggingCacheModel.loggingId = getLoggingId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            loggingCacheModel.createDate = createDate.getTime();
        } else {
            loggingCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            loggingCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            loggingCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        loggingCacheModel.isSimpleSearch = getIsSimpleSearch();

        loggingCacheModel.searchString = getSearchString();

        String searchString = loggingCacheModel.searchString;

        if ((searchString != null) && (searchString.length() == 0)) {
            loggingCacheModel.searchString = null;
        }

        loggingCacheModel.categoryIDString = getCategoryIDString();

        String categoryIDString = loggingCacheModel.categoryIDString;

        if ((categoryIDString != null) && (categoryIDString.length() == 0)) {
            loggingCacheModel.categoryIDString = null;
        }

        loggingCacheModel.regionIDString = getRegionIDString();

        String regionIDString = loggingCacheModel.regionIDString;

        if ((regionIDString != null) && (regionIDString.length() == 0)) {
            loggingCacheModel.regionIDString = null;
        }

        loggingCacheModel.entitlementIDString = getEntitlementIDString();

        String entitlementIDString = loggingCacheModel.entitlementIDString;

        if ((entitlementIDString != null) &&
                (entitlementIDString.length() == 0)) {
            loggingCacheModel.entitlementIDString = null;
        }

        loggingCacheModel.targetOS = getTargetOS();

        String targetOS = loggingCacheModel.targetOS;

        if ((targetOS != null) && (targetOS.length() == 0)) {
            loggingCacheModel.targetOS = null;
        }

        loggingCacheModel.fee = getFee();

        loggingCacheModel.targetCategory = getTargetCategory();

        String targetCategory = loggingCacheModel.targetCategory;

        if ((targetCategory != null) && (targetCategory.length() == 0)) {
            loggingCacheModel.targetCategory = null;
        }

        loggingCacheModel.passel = getPassel();

        return loggingCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{loggingId=");
        sb.append(getLoggingId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", isSimpleSearch=");
        sb.append(getIsSimpleSearch());
        sb.append(", searchString=");
        sb.append(getSearchString());
        sb.append(", categoryIDString=");
        sb.append(getCategoryIDString());
        sb.append(", regionIDString=");
        sb.append(getRegionIDString());
        sb.append(", entitlementIDString=");
        sb.append(getEntitlementIDString());
        sb.append(", targetOS=");
        sb.append(getTargetOS());
        sb.append(", fee=");
        sb.append(getFee());
        sb.append(", targetCategory=");
        sb.append(getTargetCategory());
        sb.append(", passel=");
        sb.append(getPassel());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("de.fraunhofer.fokus.movepla.model.Logging");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>loggingId</column-name><column-value><![CDATA[");
        sb.append(getLoggingId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isSimpleSearch</column-name><column-value><![CDATA[");
        sb.append(getIsSimpleSearch());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>searchString</column-name><column-value><![CDATA[");
        sb.append(getSearchString());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>categoryIDString</column-name><column-value><![CDATA[");
        sb.append(getCategoryIDString());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>regionIDString</column-name><column-value><![CDATA[");
        sb.append(getRegionIDString());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>entitlementIDString</column-name><column-value><![CDATA[");
        sb.append(getEntitlementIDString());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>targetOS</column-name><column-value><![CDATA[");
        sb.append(getTargetOS());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fee</column-name><column-value><![CDATA[");
        sb.append(getFee());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>targetCategory</column-name><column-value><![CDATA[");
        sb.append(getTargetCategory());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>passel</column-name><column-value><![CDATA[");
        sb.append(getPassel());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
