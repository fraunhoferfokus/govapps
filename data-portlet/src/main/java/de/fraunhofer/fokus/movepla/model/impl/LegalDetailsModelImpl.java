package de.fraunhofer.fokus.movepla.model.impl;

/*
 * #%L
 * govapps_data
 * $Id: LegalDetailsModelImpl.java 566 2014-11-13 15:22:01Z sma $
 * %%
 * Copyright (C) 2013 - 2014 Fraunhofer FOKUS / CC Ã–FIT
 * %%
 * Copyright (c) 2,013, Fraunhofer FOKUS, Kompetenzzentrum Oeffentliche IT 
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above copyright notice, 
 *    this list of conditions and the following disclaimer.
 * 
 * 2) Redistributions in binary form must reproduce the above copyright notice, 
 *    this list of conditions and the following disclaimer in the documentation 
 *    and/or other materials provided with the distribution.
 * 
 * 3) All advertising materials mentioning features or use of this software must 
 *    display the following acknowledgement: 
 *    This product includes software developed by Fraunhofer FOKUS, Kompetenzzentrum Oeffentliche IT.
 * 
 * 4) Neither the name of the organization nor the names of its contributors may 
 *    be used to endorse or promote products derived from this software without 
 *    specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY COPYRIGHT HOLDER ''AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL 
 * Fraunhofer FOKUS, Kompetenzzentrum Oeffentliche IT 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.fraunhofer.fokus.movepla.model.LegalDetails;
import de.fraunhofer.fokus.movepla.model.LegalDetailsModel;
import de.fraunhofer.fokus.movepla.model.LegalDetailsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LegalDetails service. Represents a row in the &quot;mvp_LegalDetails&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.fraunhofer.fokus.movepla.model.LegalDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LegalDetailsImpl}.
 * </p>
 *
 * @author jpa
 * @see LegalDetailsImpl
 * @see de.fraunhofer.fokus.movepla.model.LegalDetails
 * @see de.fraunhofer.fokus.movepla.model.LegalDetailsModel
 * @generated
 */
@JSON(strict = true)
public class LegalDetailsModelImpl extends BaseModelImpl<LegalDetails>
    implements LegalDetailsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a legal details model instance should use the {@link de.fraunhofer.fokus.movepla.model.LegalDetails} interface instead.
     */
    public static final String TABLE_NAME = "mvp_LegalDetails";
    public static final Object[][] TABLE_COLUMNS = {
            { "legalDetailsId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "name", Types.VARCHAR },
            { "valueAddedTaxNo", Types.VARCHAR },
            { "registrationCourt", Types.VARCHAR },
            { "legalForm", Types.VARCHAR },
            { "address", Types.VARCHAR },
            { "telephone", Types.VARCHAR },
            { "email", Types.VARCHAR },
            { "URL", Types.VARCHAR },
            { "fax", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table mvp_LegalDetails (legalDetailsId LONG not null primary key,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,valueAddedTaxNo VARCHAR(75) null,registrationCourt VARCHAR(75) null,legalForm VARCHAR(75) null,address VARCHAR(75) null,telephone VARCHAR(75) null,email VARCHAR(75) null,URL VARCHAR(75) null,fax VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table mvp_LegalDetails";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.de.fraunhofer.fokus.movepla.model.LegalDetails"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.de.fraunhofer.fokus.movepla.model.LegalDetails"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.de.fraunhofer.fokus.movepla.model.LegalDetails"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.de.fraunhofer.fokus.movepla.model.LegalDetails"));
    private static ClassLoader _classLoader = LegalDetails.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            LegalDetails.class
        };
    private long _legalDetailsId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _userId;
    private String _userUuid;
    private Date _createDate;
    private Date _modifiedDate;
    private String _name;
    private String _valueAddedTaxNo;
    private String _registrationCourt;
    private String _legalForm;
    private String _address;
    private String _telephone;
    private String _email;
    private String _URL;
    private String _fax;
    private long _columnBitmask;
    private LegalDetails _escapedModelProxy;

    public LegalDetailsModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static LegalDetails toModel(LegalDetailsSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        LegalDetails model = new LegalDetailsImpl();

        model.setLegalDetailsId(soapModel.getLegalDetailsId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setName(soapModel.getName());
        model.setValueAddedTaxNo(soapModel.getValueAddedTaxNo());
        model.setRegistrationCourt(soapModel.getRegistrationCourt());
        model.setLegalForm(soapModel.getLegalForm());
        model.setAddress(soapModel.getAddress());
        model.setTelephone(soapModel.getTelephone());
        model.setEmail(soapModel.getEmail());
        model.setURL(soapModel.getURL());
        model.setFax(soapModel.getFax());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<LegalDetails> toModels(LegalDetailsSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<LegalDetails> models = new ArrayList<LegalDetails>(soapModels.length);

        for (LegalDetailsSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _legalDetailsId;
    }

    public void setPrimaryKey(long primaryKey) {
        setLegalDetailsId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_legalDetailsId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return LegalDetails.class;
    }

    public String getModelClassName() {
        return LegalDetails.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("legalDetailsId", getLegalDetailsId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("name", getName());
        attributes.put("valueAddedTaxNo", getValueAddedTaxNo());
        attributes.put("registrationCourt", getRegistrationCourt());
        attributes.put("legalForm", getLegalForm());
        attributes.put("address", getAddress());
        attributes.put("telephone", getTelephone());
        attributes.put("email", getEmail());
        attributes.put("URL", getURL());
        attributes.put("fax", getFax());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long legalDetailsId = (Long) attributes.get("legalDetailsId");

        if (legalDetailsId != null) {
            setLegalDetailsId(legalDetailsId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String valueAddedTaxNo = (String) attributes.get("valueAddedTaxNo");

        if (valueAddedTaxNo != null) {
            setValueAddedTaxNo(valueAddedTaxNo);
        }

        String registrationCourt = (String) attributes.get("registrationCourt");

        if (registrationCourt != null) {
            setRegistrationCourt(registrationCourt);
        }

        String legalForm = (String) attributes.get("legalForm");

        if (legalForm != null) {
            setLegalForm(legalForm);
        }

        String address = (String) attributes.get("address");

        if (address != null) {
            setAddress(address);
        }

        String telephone = (String) attributes.get("telephone");

        if (telephone != null) {
            setTelephone(telephone);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }

        String URL = (String) attributes.get("URL");

        if (URL != null) {
            setURL(URL);
        }

        String fax = (String) attributes.get("fax");

        if (fax != null) {
            setFax(fax);
        }
    }

    @JSON
    public long getLegalDetailsId() {
        return _legalDetailsId;
    }

    public void setLegalDetailsId(long legalDetailsId) {
        _legalDetailsId = legalDetailsId;
    }

    @JSON
    public long getCompanyId() {
        return _companyId;
    }

    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @JSON
    public long getUserId() {
        return _userId;
    }

    public void setUserId(long userId) {
        _userId = userId;
    }

    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    public Date getCreateDate() {
        return _createDate;
    }

    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    public void setName(String name) {
        _name = name;
    }

    @JSON
    public String getValueAddedTaxNo() {
        if (_valueAddedTaxNo == null) {
            return StringPool.BLANK;
        } else {
            return _valueAddedTaxNo;
        }
    }

    public void setValueAddedTaxNo(String valueAddedTaxNo) {
        _valueAddedTaxNo = valueAddedTaxNo;
    }

    @JSON
    public String getRegistrationCourt() {
        if (_registrationCourt == null) {
            return StringPool.BLANK;
        } else {
            return _registrationCourt;
        }
    }

    public void setRegistrationCourt(String registrationCourt) {
        _registrationCourt = registrationCourt;
    }

    @JSON
    public String getLegalForm() {
        if (_legalForm == null) {
            return StringPool.BLANK;
        } else {
            return _legalForm;
        }
    }

    public void setLegalForm(String legalForm) {
        _legalForm = legalForm;
    }

    @JSON
    public String getAddress() {
        if (_address == null) {
            return StringPool.BLANK;
        } else {
            return _address;
        }
    }

    public void setAddress(String address) {
        _address = address;
    }

    @JSON
    public String getTelephone() {
        if (_telephone == null) {
            return StringPool.BLANK;
        } else {
            return _telephone;
        }
    }

    public void setTelephone(String telephone) {
        _telephone = telephone;
    }

    @JSON
    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    public void setEmail(String email) {
        _email = email;
    }

    @JSON
    public String getURL() {
        if (_URL == null) {
            return StringPool.BLANK;
        } else {
            return _URL;
        }
    }

    public void setURL(String URL) {
        _URL = URL;
    }

    @JSON
    public String getFax() {
        if (_fax == null) {
            return StringPool.BLANK;
        } else {
            return _fax;
        }
    }

    public void setFax(String fax) {
        _fax = fax;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            LegalDetails.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LegalDetails toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (LegalDetails) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        LegalDetailsImpl legalDetailsImpl = new LegalDetailsImpl();

        legalDetailsImpl.setLegalDetailsId(getLegalDetailsId());
        legalDetailsImpl.setCompanyId(getCompanyId());
        legalDetailsImpl.setUserId(getUserId());
        legalDetailsImpl.setCreateDate(getCreateDate());
        legalDetailsImpl.setModifiedDate(getModifiedDate());
        legalDetailsImpl.setName(getName());
        legalDetailsImpl.setValueAddedTaxNo(getValueAddedTaxNo());
        legalDetailsImpl.setRegistrationCourt(getRegistrationCourt());
        legalDetailsImpl.setLegalForm(getLegalForm());
        legalDetailsImpl.setAddress(getAddress());
        legalDetailsImpl.setTelephone(getTelephone());
        legalDetailsImpl.setEmail(getEmail());
        legalDetailsImpl.setURL(getURL());
        legalDetailsImpl.setFax(getFax());

        legalDetailsImpl.resetOriginalValues();

        return legalDetailsImpl;
    }

    public int compareTo(LegalDetails legalDetails) {
        long primaryKey = legalDetails.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        LegalDetails legalDetails = null;

        try {
            legalDetails = (LegalDetails) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = legalDetails.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LegalDetailsModelImpl legalDetailsModelImpl = this;

        legalDetailsModelImpl._originalCompanyId = legalDetailsModelImpl._companyId;

        legalDetailsModelImpl._setOriginalCompanyId = false;

        legalDetailsModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LegalDetails> toCacheModel() {
        LegalDetailsCacheModel legalDetailsCacheModel = new LegalDetailsCacheModel();

        legalDetailsCacheModel.legalDetailsId = getLegalDetailsId();

        legalDetailsCacheModel.companyId = getCompanyId();

        legalDetailsCacheModel.userId = getUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            legalDetailsCacheModel.createDate = createDate.getTime();
        } else {
            legalDetailsCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            legalDetailsCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            legalDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        legalDetailsCacheModel.name = getName();

        String name = legalDetailsCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            legalDetailsCacheModel.name = null;
        }

        legalDetailsCacheModel.valueAddedTaxNo = getValueAddedTaxNo();

        String valueAddedTaxNo = legalDetailsCacheModel.valueAddedTaxNo;

        if ((valueAddedTaxNo != null) && (valueAddedTaxNo.length() == 0)) {
            legalDetailsCacheModel.valueAddedTaxNo = null;
        }

        legalDetailsCacheModel.registrationCourt = getRegistrationCourt();

        String registrationCourt = legalDetailsCacheModel.registrationCourt;

        if ((registrationCourt != null) && (registrationCourt.length() == 0)) {
            legalDetailsCacheModel.registrationCourt = null;
        }

        legalDetailsCacheModel.legalForm = getLegalForm();

        String legalForm = legalDetailsCacheModel.legalForm;

        if ((legalForm != null) && (legalForm.length() == 0)) {
            legalDetailsCacheModel.legalForm = null;
        }

        legalDetailsCacheModel.address = getAddress();

        String address = legalDetailsCacheModel.address;

        if ((address != null) && (address.length() == 0)) {
            legalDetailsCacheModel.address = null;
        }

        legalDetailsCacheModel.telephone = getTelephone();

        String telephone = legalDetailsCacheModel.telephone;

        if ((telephone != null) && (telephone.length() == 0)) {
            legalDetailsCacheModel.telephone = null;
        }

        legalDetailsCacheModel.email = getEmail();

        String email = legalDetailsCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            legalDetailsCacheModel.email = null;
        }

        legalDetailsCacheModel.URL = getURL();

        String URL = legalDetailsCacheModel.URL;

        if ((URL != null) && (URL.length() == 0)) {
            legalDetailsCacheModel.URL = null;
        }

        legalDetailsCacheModel.fax = getFax();

        String fax = legalDetailsCacheModel.fax;

        if ((fax != null) && (fax.length() == 0)) {
            legalDetailsCacheModel.fax = null;
        }

        return legalDetailsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(29);

        sb.append("{legalDetailsId=");
        sb.append(getLegalDetailsId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", valueAddedTaxNo=");
        sb.append(getValueAddedTaxNo());
        sb.append(", registrationCourt=");
        sb.append(getRegistrationCourt());
        sb.append(", legalForm=");
        sb.append(getLegalForm());
        sb.append(", address=");
        sb.append(getAddress());
        sb.append(", telephone=");
        sb.append(getTelephone());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append(", URL=");
        sb.append(getURL());
        sb.append(", fax=");
        sb.append(getFax());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(46);

        sb.append("<model><model-name>");
        sb.append("de.fraunhofer.fokus.movepla.model.LegalDetails");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>legalDetailsId</column-name><column-value><![CDATA[");
        sb.append(getLegalDetailsId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>valueAddedTaxNo</column-name><column-value><![CDATA[");
        sb.append(getValueAddedTaxNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>registrationCourt</column-name><column-value><![CDATA[");
        sb.append(getRegistrationCourt());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>legalForm</column-name><column-value><![CDATA[");
        sb.append(getLegalForm());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>address</column-name><column-value><![CDATA[");
        sb.append(getAddress());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>telephone</column-name><column-value><![CDATA[");
        sb.append(getTelephone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>URL</column-name><column-value><![CDATA[");
        sb.append(getURL());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fax</column-name><column-value><![CDATA[");
        sb.append(getFax());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
