package de.fraunhofer.fokus.movepla.model.impl;

/*
 * #%L
 * govapps_data
 * $Id: RelatedApplicationsModelImpl.java 566 2014-11-13 15:22:01Z sma $
 * %%
 * Copyright (C) 2013 - 2014 Fraunhofer FOKUS / CC Ã–FIT
 * %%
 * Copyright (c) 2,013, Fraunhofer FOKUS, Kompetenzzentrum Oeffentliche IT 
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above copyright notice, 
 *    this list of conditions and the following disclaimer.
 * 
 * 2) Redistributions in binary form must reproduce the above copyright notice, 
 *    this list of conditions and the following disclaimer in the documentation 
 *    and/or other materials provided with the distribution.
 * 
 * 3) All advertising materials mentioning features or use of this software must 
 *    display the following acknowledgement: 
 *    This product includes software developed by Fraunhofer FOKUS, Kompetenzzentrum Oeffentliche IT.
 * 
 * 4) Neither the name of the organization nor the names of its contributors may 
 *    be used to endorse or promote products derived from this software without 
 *    specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY COPYRIGHT HOLDER ''AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL 
 * Fraunhofer FOKUS, Kompetenzzentrum Oeffentliche IT 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.fraunhofer.fokus.movepla.model.RelatedApplications;
import de.fraunhofer.fokus.movepla.model.RelatedApplicationsModel;
import de.fraunhofer.fokus.movepla.model.RelatedApplicationsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the RelatedApplications service. Represents a row in the &quot;mvp_RelatedApplications&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.fraunhofer.fokus.movepla.model.RelatedApplicationsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RelatedApplicationsImpl}.
 * </p>
 *
 * @author jpa
 * @see RelatedApplicationsImpl
 * @see de.fraunhofer.fokus.movepla.model.RelatedApplications
 * @see de.fraunhofer.fokus.movepla.model.RelatedApplicationsModel
 * @generated
 */
@JSON(strict = true)
public class RelatedApplicationsModelImpl extends BaseModelImpl<RelatedApplications>
    implements RelatedApplicationsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a related applications model instance should use the {@link de.fraunhofer.fokus.movepla.model.RelatedApplications} interface instead.
     */
    public static final String TABLE_NAME = "mvp_RelatedApplications";
    public static final Object[][] TABLE_COLUMNS = {
            { "RelatedApplicationsID", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "applicationId", Types.BIGINT },
            { "applicationId2", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table mvp_RelatedApplications (RelatedApplicationsID LONG not null primary key,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,applicationId LONG,applicationId2 LONG)";
    public static final String TABLE_SQL_DROP = "drop table mvp_RelatedApplications";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.de.fraunhofer.fokus.movepla.model.RelatedApplications"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.de.fraunhofer.fokus.movepla.model.RelatedApplications"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.de.fraunhofer.fokus.movepla.model.RelatedApplications"),
            true);
    public static long APPLICATIONID_COLUMN_BITMASK = 1L;
    public static long APPLICATIONID2_COLUMN_BITMASK = 2L;
    public static long COMPANYID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.de.fraunhofer.fokus.movepla.model.RelatedApplications"));
    private static ClassLoader _classLoader = RelatedApplications.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            RelatedApplications.class
        };
    private long _RelatedApplicationsID;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _userId;
    private String _userUuid;
    private Date _createDate;
    private Date _modifiedDate;
    private long _applicationId;
    private long _originalApplicationId;
    private boolean _setOriginalApplicationId;
    private long _applicationId2;
    private long _originalApplicationId2;
    private boolean _setOriginalApplicationId2;
    private long _columnBitmask;
    private RelatedApplications _escapedModelProxy;

    public RelatedApplicationsModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static RelatedApplications toModel(RelatedApplicationsSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        RelatedApplications model = new RelatedApplicationsImpl();

        model.setRelatedApplicationsID(soapModel.getRelatedApplicationsID());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setApplicationId(soapModel.getApplicationId());
        model.setApplicationId2(soapModel.getApplicationId2());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<RelatedApplications> toModels(
        RelatedApplicationsSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<RelatedApplications> models = new ArrayList<RelatedApplications>(soapModels.length);

        for (RelatedApplicationsSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _RelatedApplicationsID;
    }

    public void setPrimaryKey(long primaryKey) {
        setRelatedApplicationsID(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_RelatedApplicationsID);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return RelatedApplications.class;
    }

    public String getModelClassName() {
        return RelatedApplications.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("RelatedApplicationsID", getRelatedApplicationsID());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("applicationId", getApplicationId());
        attributes.put("applicationId2", getApplicationId2());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long RelatedApplicationsID = (Long) attributes.get(
                "RelatedApplicationsID");

        if (RelatedApplicationsID != null) {
            setRelatedApplicationsID(RelatedApplicationsID);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Long applicationId = (Long) attributes.get("applicationId");

        if (applicationId != null) {
            setApplicationId(applicationId);
        }

        Long applicationId2 = (Long) attributes.get("applicationId2");

        if (applicationId2 != null) {
            setApplicationId2(applicationId2);
        }
    }

    @JSON
    public long getRelatedApplicationsID() {
        return _RelatedApplicationsID;
    }

    public void setRelatedApplicationsID(long RelatedApplicationsID) {
        _RelatedApplicationsID = RelatedApplicationsID;
    }

    @JSON
    public long getCompanyId() {
        return _companyId;
    }

    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @JSON
    public long getUserId() {
        return _userId;
    }

    public void setUserId(long userId) {
        _userId = userId;
    }

    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    public Date getCreateDate() {
        return _createDate;
    }

    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    public long getApplicationId() {
        return _applicationId;
    }

    public void setApplicationId(long applicationId) {
        _columnBitmask |= APPLICATIONID_COLUMN_BITMASK;

        if (!_setOriginalApplicationId) {
            _setOriginalApplicationId = true;

            _originalApplicationId = _applicationId;
        }

        _applicationId = applicationId;
    }

    public long getOriginalApplicationId() {
        return _originalApplicationId;
    }

    @JSON
    public long getApplicationId2() {
        return _applicationId2;
    }

    public void setApplicationId2(long applicationId2) {
        _columnBitmask |= APPLICATIONID2_COLUMN_BITMASK;

        if (!_setOriginalApplicationId2) {
            _setOriginalApplicationId2 = true;

            _originalApplicationId2 = _applicationId2;
        }

        _applicationId2 = applicationId2;
    }

    public long getOriginalApplicationId2() {
        return _originalApplicationId2;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            RelatedApplications.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public RelatedApplications toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (RelatedApplications) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        RelatedApplicationsImpl relatedApplicationsImpl = new RelatedApplicationsImpl();

        relatedApplicationsImpl.setRelatedApplicationsID(getRelatedApplicationsID());
        relatedApplicationsImpl.setCompanyId(getCompanyId());
        relatedApplicationsImpl.setUserId(getUserId());
        relatedApplicationsImpl.setCreateDate(getCreateDate());
        relatedApplicationsImpl.setModifiedDate(getModifiedDate());
        relatedApplicationsImpl.setApplicationId(getApplicationId());
        relatedApplicationsImpl.setApplicationId2(getApplicationId2());

        relatedApplicationsImpl.resetOriginalValues();

        return relatedApplicationsImpl;
    }

    public int compareTo(RelatedApplications relatedApplications) {
        long primaryKey = relatedApplications.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        RelatedApplications relatedApplications = null;

        try {
            relatedApplications = (RelatedApplications) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = relatedApplications.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        RelatedApplicationsModelImpl relatedApplicationsModelImpl = this;

        relatedApplicationsModelImpl._originalCompanyId = relatedApplicationsModelImpl._companyId;

        relatedApplicationsModelImpl._setOriginalCompanyId = false;

        relatedApplicationsModelImpl._originalApplicationId = relatedApplicationsModelImpl._applicationId;

        relatedApplicationsModelImpl._setOriginalApplicationId = false;

        relatedApplicationsModelImpl._originalApplicationId2 = relatedApplicationsModelImpl._applicationId2;

        relatedApplicationsModelImpl._setOriginalApplicationId2 = false;

        relatedApplicationsModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<RelatedApplications> toCacheModel() {
        RelatedApplicationsCacheModel relatedApplicationsCacheModel = new RelatedApplicationsCacheModel();

        relatedApplicationsCacheModel.RelatedApplicationsID = getRelatedApplicationsID();

        relatedApplicationsCacheModel.companyId = getCompanyId();

        relatedApplicationsCacheModel.userId = getUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            relatedApplicationsCacheModel.createDate = createDate.getTime();
        } else {
            relatedApplicationsCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            relatedApplicationsCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            relatedApplicationsCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        relatedApplicationsCacheModel.applicationId = getApplicationId();

        relatedApplicationsCacheModel.applicationId2 = getApplicationId2();

        return relatedApplicationsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{RelatedApplicationsID=");
        sb.append(getRelatedApplicationsID());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", applicationId=");
        sb.append(getApplicationId());
        sb.append(", applicationId2=");
        sb.append(getApplicationId2());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("de.fraunhofer.fokus.movepla.model.RelatedApplications");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>RelatedApplicationsID</column-name><column-value><![CDATA[");
        sb.append(getRelatedApplicationsID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>applicationId</column-name><column-value><![CDATA[");
        sb.append(getApplicationId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>applicationId2</column-name><column-value><![CDATA[");
        sb.append(getApplicationId2());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
